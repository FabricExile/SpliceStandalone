{
  "version": "1013000",
  "info": {
    "hostAppName": "Splice Standalone",
    "hostAppVersion": "1.0"
  },
  "nodes": [
    {
      "name": "DGNode",
      "dependencies": {},
      "bindings": [
        {
          "operator": {
            "name": "cudadeformer",
            "entry": "cudadeformer",
            "filename": "cudadeformer.kl",
            "kl": "require Math;\nrequire Geometry;\nrequire InlineDrawing;\nrequire CudaGLHelpers;\n\nfunction Float32 fade(Float32 t)\n{\n  return t * t * t * (t * (t * 6 - 15) + 10);\n}\n\nfunction Float32 lerp(Float32 t, Float32 a, Float32 b)\n{\n  return a + t * (b - a);\n}\n\nfunction Float32 grad(SInt32 hash, Float32 x, Float32 y, Float32 z) \n{\n  SInt32 h = hash & 15;\n  Float32  u = h < 8 ? x : y,\n      v = h < 4 ? y : h==12||h==14 ? x : z;\n  return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);\n}\n\nfunction Float32 pnoise (Vec3 input)\n{\n  Float32 x = input.x;\n  Float32 y = input.y;\n  Float32 z = input.z;\n\n  const Float32 p[] =\n  [\n    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233,\n    7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219,\n    203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20,\n    125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105,\n    92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1,\n    216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135,\n    130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52,\n    217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85,\n    212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183,\n    170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155,\n    167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224,\n    232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238,\n    210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239,\n    107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115,\n    121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29,\n    24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180, 151, 160,\n    137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140,\n    36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247,\n    120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32,\n    57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68,\n    175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111,\n    229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187,\n    208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100,\n    109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38,\n    147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17,\n    182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163,\n    70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98,\n    108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51,\n    145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157,\n    184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,\n    93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156,\n    180\n  ];\n\n  SInt32   X = SInt32(floor(x)) & 255;\n  SInt32   Y = SInt32(floor(y)) & 255;\n  SInt32   Z = SInt32(floor(z)) & 255;\n  x -= floor(x);\n  y -= floor(y);\n  z -= floor(z);\n  Float32  u = fade(x);\n  Float32  v = fade(y);\n  Float32  w = fade(z);\n  SInt32  A = p[X]+Y,\n   AA = p[A]+Z, \n   AB = p[A+1]+Z,\n   B = p[X+1]+Y, \n   BA = p[B]+Z, \n   BB = p[B+1]+Z;\n\n  return\n    lerp(w,lerp(v,lerp(u, grad(p[AA  ], x, y, z),\n                  grad(p[BA  ], x-1, y, z)),\n          lerp(u, grad(p[AB  ], x, y-1, z),\n                  grad(p[BB  ], x-1, y-1, z))),\n          lerp(v, lerp(u, grad(p[AA+1], x, y, z-1 ),\n                  grad(p[BA+1], x-1, y, z-1)),\n          lerp(u, grad(p[AB+1], x, y-1, z-1),\n                  grad(p[BB+1], x-1, y-1, z-1))));\n}\n\noperator deform<<<index>>>(\n  Float32 frame,\n  Float32 speed,\n  Float32 factor1,\n  Float32 factor2,\n  io Vec3 positions<>,\n  Vec3 normals<>,\n  Vec3 originalPositions<>,\n  Vec3 originalNormals<>,\n  io Vec3 velocities<>\n) {\n  if(frame <= 0.0) {\n    positions[index] = originalPositions[index];\n    velocities[index] = Vec3(0.0, 0.0, 0.0);\n  } else {\n  \n    for(Size i=0;i<10;i++)\n    {\n      Vec3 randomVel;\n      randomVel = originalNormals[index];\n      randomVel *= 0.05;\n\n      Scalar a = Math_linearInterpolate(0.01, 3.14, pnoise(originalPositions[index] * factor1));\n      Scalar f = Math_linearInterpolate(0.1, 1.0, pnoise(originalPositions[index] * factor2 + Vec3(0.0, 1.0, 0.0) * frame * 0.1));\n\n      Vec3 shapeVel = originalPositions[index] - positions[index];\n      shapeVel *= 0.5;\n  \n      Vec3 newVel = randomVel.linearInterpolate(shapeVel, 0.5 + 0.5 * sin(a + f * frame * speed * 0.05));\n      velocities[index] = velocities[index].linearInterpolate(newVel, 0.1);\n\n      positions[index] += velocities[index] / 10.0;\n    }\n  }\n}\n\noperator computeNormal<<<index>>>(\n  Vec3 positions<>,\n  UInt32 neighborA<>,\n  UInt32 neighborB<>,\n  io Vec3 normals<>\n) {\n  Vec3 p0 = positions[index];\n  Vec3 p1 = positions[neighborA[index]];\n  Vec3 p2 = positions[neighborB[index]];\n  normals[index] = (p1 - p0).cross(p2 - p0); // .unit();\n\n  Scalar l = normals[index].length();\n  if(l != 0)\n    normals[index] /= l;\n}\n\noperator cudadeformer(Scalar factor1, Scalar factor2, Scalar speed, Scalar time, Boolean useGPU, io DrawingHandle handle, io PolygonMesh geo, io CudaGLResourceManager resources) {\n\n  resources.enableGPU(useGPU);\n  \n  // generate a sphere\n  if(geo.pointCount() == 0) {\n    geo.addSphere(Xfo(), 8, 512, true, true);\n \n    GeometryAttributes attributes = geo.getAttributes();\n    Vec3Attribute positionsAttr = attributes.getAttribute('positions', Vec3Attribute);\n    Vec3Attribute normalsAttr = attributes.getAttribute('normals', Vec3Attribute);\n    Vec3Attribute originalPositionsAttr = attributes.getOrCreateVec3Attribute('originalPositions');\n    originalPositionsAttr.values = positionsAttr.values.clone();\n    Vec3Attribute originalNormalsAttr = attributes.getOrCreateVec3Attribute('originalNormals');\n    originalNormalsAttr.values = normalsAttr.values.clone();\n\n    // create additional attributes\n    Vec3Attribute velocitiesAttr = attributes.getOrCreateVec3Attribute('velocities');\n    Ref<UInt32Attribute> neighborAAttr = attributes.getOrCreateUInt32Attribute('neighborA');\n    Ref<UInt32Attribute> neighborBAttr = attributes.getOrCreateUInt32Attribute('neighborB');\n\n    for(Size i=0;i<geo.pointCount();i++) {\n      LocalL16UInt32Array surroundingPoints;\n      geo.getPointSurroundingPoints(i, false, surroundingPoints );\n      geo.setPointAttribute(i, neighborAAttr, UInt32(surroundingPoints.get(0)));\n      geo.setPointAttribute(i, neighborBAttr, UInt32(surroundingPoints.get(1)));\n    }\n\n    report('Created PolygonMesh for deformation ('+geo.pointCount()+' points).');\n  }\n  \n  if(handle.isEmpty()) {\n  \n    InlineDrawing draw = handle.getDrawing();\n    \n    InlineMeshShape shape = InlineMeshShape('shape', geo);\n\n    // setup the shader and instance\n    InlineDrawing drawing = OGLInlineDrawing_GetInstance();\n    OGLWireFrameShader shader = drawing.registerShader(OGLWireFrameShader('wireframe', OGLSurfaceShader()));\n    shader.setWireFrame(false);\n    InlineMaterial mat = shader.getOrCreateMaterial('default');\n    mat.setUniform('u_diffuseColor', Color(0.2, 0.5, 1.0));\n    SimpleInlineInstance instance('shape', handle.getRootTransform(), shape, mat);\n\n    report('Created realtime rendering setup.');\n\n    // generate all resources for the sphere\n    resources.setGeometryAttributes(geo.getAttributes());\n    resources.setInlineShape(shape);\n\n    resources.addVec3Resource('positions');\n    resources.addVec3Resource('normals');\n    resources.addVec3Resource('originalPositions');\n    resources.addVec3Resource('originalNormals');\n    resources.addVec3Resource('velocities');\n    resources.addUInt32Resource('neighborA');\n    resources.addUInt32Resource('neighborB');\n    report('Mapped all resources.');\n  }\n\n  // map all resources to the GPU\n  resources.map();\n\n  Vec3 positions<> = resources.getVec3Array('positions');\n  Vec3 normals<> = resources.getVec3Array('normals');\n  Vec3 originalPositions<> = resources.getVec3Array('originalPositions');\n  Vec3 originalNormals<> = resources.getVec3Array('originalNormals');\n  Vec3 velocities<> = resources.getVec3Array('velocities');\n  UInt32 neighborA<> = resources.getUInt32Array('neighborA');\n  UInt32 neighborB<> = resources.getUInt32Array('neighborB');\n\n  Size numPositions = positions.size();\n  deform<<<numPositions@resources.useGPU>>>(\n    time, \n    speed,\n    factor1,\n    factor2,\n    positions, \n    normals,\n    originalPositions,\n    originalNormals,\n    velocities\n  );\n\n  computeNormal<<<numPositions@resources.useGPU>>>(\n    positions, \n    neighborA,\n    neighborB,\n    normals\n  );\n\n  if(!resources.useGPU) {\n    GeometryAttributes attributes = geo.getAttributes();\n    Vec3Attribute positionsAttr = attributes.getAttribute('positions', Vec3Attribute);\n    Vec3Attribute normalsAttr = attributes.getAttribute('normals', Vec3Attribute);\n    positionsAttr.incrementVersion();\n    normalsAttr.incrementVersion();\n  }\n\n  resources.unmap();\n  \n}",
            "portmap": {}
          }
        }
      ]
    }
  ],
  "extensions": [
    "CudaGLHelpers"
  ],
  "ports": [
    {
      "name": "factor1",
      "node": "DGNode",
      "graph": "cuda_noisedeformer",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "factor1",
      "mode": "in",
      "options": {
        "uiMax": 0.5,
        "uiMin": 0
      },
      "persistence": true,
      "default": "0.2"
    },
    {
      "name": "factor2",
      "node": "DGNode",
      "graph": "cuda_noisedeformer",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "factor2",
      "mode": "in",
      "options": {
        "uiMax": 2,
        "uiMin": 0
      },
      "persistence": true,
      "default": "0.2"
    },
    {
      "name": "geo",
      "node": "DGNode",
      "graph": "cuda_noisedeformer",
      "type": "PolygonMesh",
      "autoInitObjects": true,
      "member": "geo",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "handle",
      "node": "DGNode",
      "graph": "cuda_noisedeformer",
      "type": "DrawingHandle",
      "autoInitObjects": true,
      "member": "handle",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "resources",
      "node": "DGNode",
      "graph": "cuda_noisedeformer",
      "type": "CudaGLResourceManager",
      "autoInitObjects": true,
      "member": "resources",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "speed",
      "node": "DGNode",
      "graph": "cuda_noisedeformer",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "speed",
      "mode": "in",
      "options": {
        "uiMax": 100,
        "uiMin": 0
      },
      "persistence": true,
      "default": "50.0"
    },
    {
      "name": "time",
      "node": "DGNode",
      "graph": "cuda_noisedeformer",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "time",
      "mode": "in",
      "persistence": false
    },
    {
      "name": "useGPU",
      "node": "DGNode",
      "graph": "cuda_noisedeformer",
      "type": "Boolean",
      "autoInitObjects": true,
      "member": "useGPU",
      "mode": "in",
      "persistence": true,
      "default": "true"
    }
  ]
}