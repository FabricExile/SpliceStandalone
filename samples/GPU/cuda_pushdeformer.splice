{
  "version": "1013000",
  "info": {
    "hostAppName": "Splice Standalone",
    "hostAppVersion": "1.0"
  },
  "nodes": [
    {
      "name": "DGNode",
      "dependencies": {},
      "bindings": [
        {
          "operator": {
            "name": "cudadeformer",
            "entry": "cudadeformer",
            "filename": "cudadeformer.kl",
            "kl": "require Math;\nrequire Geometry;\nrequire InlineDrawing;\n\nconst Integer repetitions = 8;\n\noperator deform<<<index>>>(io Vec3 positions[], io Vec3 normals[], Scalar time) {\n  for(Integer i=0;i<repetitions;i++) {\n    positions[index] += normals[index] * sin(time * 0.1) / Scalar(repetitions);\n    Quat q;\n    Vec3 axis(1, 0, 0);\n    axis.x += mathRandomScalar(index + 17, 4) * 0.01;\n    axis.y += mathRandomScalar(index + 19, 5) * 0.01;\n    axis.z += mathRandomScalar(index + 21, 6) * 0.01;\n    axis.setUnit();\n    q.setFromAxisAndAngle(axis, positions[index].x  / Scalar(repetitions));\n    normals[index] = q.rotateVector(normals[index]);\n  }\n}\n\noperator cudadeformer(Scalar time, Boolean useGPU, io DrawingHandle handle, io PolygonMesh geo) {\n\n  Boolean initialize = geo.pointCount() == 0;\n\n  // generate a sphere\n  if(initialize) {\n    geo.addSphere(Xfo(), 8, 768, true, true);\n  }\n\n  GeometryAttributes attributes = geo.getAttributes();\n  Vec3Attribute positions = attributes.getOrCreateVec3Attribute('positions');\n  Vec3Attribute originalPositions = attributes.getOrCreateVec3Attribute('originalPositions');\n  Vec3Attribute normals = attributes.getAttribute('normals', Vec3Attribute);\n\n  if(initialize) {\n    originalPositions.values = positions.values.clone();\n    \n    report('Created PolygonMesh for deformation ('+geo.pointCount()+' points).');\n  }\n\n  if(time == 0.0) {\n    if (positions.values.getElementsMemType() != Fabric_MemType_CPU) {\n      positions.values.convertToCPU();\n      normals.values.convertToCPU();\n    }\n    originalPositions.values.copyTo(positions.values);\n    positions.incrementVersion();\n    geo.recomputePointNormals();\n  }\n\n  if (useGPU && positions.values.getElementsMemType() == Fabric_MemType_CPU) {\n    positions.values.convertToGLBuffer(GL_ARRAY_BUFFER, GL_DYNAMIC_DRAW);\n    normals.values.convertToGLBuffer(GL_ARRAY_BUFFER, GL_DYNAMIC_DRAW);\n  }\n  else if (!useGPU && positions.values.getElementsMemType() != Fabric_MemType_CPU) {\n    positions.values.convertToCPU();\n    normals.values.convertToCPU();\n  }\n  \n  if(handle.isEmpty()) {\n  \n    InlineDrawing draw = handle.getDrawing();\n    \n    InlineMeshShape shape = InlineMeshShape('shape', geo);\n\n    // setup the shader and instance\n    InlineDrawing drawing = OGLInlineDrawing_GetInstance();\n    OGLWireFrameShader shader = drawing.registerShader(OGLWireFrameShader('wireframe', OGLSurfaceShader()));\n    shader.setWireFrame(false);\n    InlineMaterial mat = shader.getOrCreateMaterial('default');\n    mat.setUniform('u_diffuseColor', Color(0.2, 0.5, 1.0));\n    SimpleInlineInstance instance('shape', handle.getRootTransform(), shape, mat);\n\n    report('Created realtime rendering setup.');\n  }\n\n  Size numPositions = positions.size();\n  deform<<<numPositions@useGPU>>>(\n    positions.values, \n    normals.values,\n    time\n  );\n  \n  if(!useGPU) {\n    positions.incrementVersion();\n    normals.incrementVersion();\n  }\n}\n",
            "portmap": {}
          }
        }
      ]
    }
  ],
  "extensions": [
  ],
  "ports": [
    {
      "name": "geo",
      "node": "DGNode",
      "graph": "cuda_pushdeformer",
      "type": "PolygonMesh",
      "autoInitObjects": true,
      "member": "geo",
      "mode": "in",
      "persistence": false
    },
    {
      "name": "handle",
      "node": "DGNode",
      "graph": "cuda_pushdeformer",
      "type": "DrawingHandle",
      "autoInitObjects": true,
      "member": "handle",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "time",
      "node": "DGNode",
      "graph": "cuda_pushdeformer",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "time",
      "mode": "in",
      "persistence": false
    },
    {
      "name": "useGPU",
      "node": "DGNode",
      "graph": "cuda_pushdeformer",
      "type": "Boolean",
      "autoInitObjects": true,
      "member": "useGPU",
      "mode": "in",
      "persistence": true,
      "default": "true"
    }
  ]
}
