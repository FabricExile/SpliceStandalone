{
  "version": "1013000",
  "info": {
    "hostAppName": "Splice Standalone",
    "hostAppVersion": "1.0"
  },
  "nodes": [
    {
      "name": "DGNode",
      "dependencies": {},
      "bindings": [
        {
          "operator": {
            "name": "drawingOp",
            "entry": "drawingOp",
            "filename": "drawingOp.kl",
            "kl": "require Math;\nrequire InlineDrawing;\n\noperator drawingOp(io DrawingHandle handle, io Vec3 result, in Integer count) {\n\n  if(handle.isEmpty()) {\n    InlineDrawing draw = handle.getDrawing();\n\n    PolygonMesh cube = PolygonMesh();\n    cube.addCuboid(Xfo(), 2, 2, 2, true, true);\n    InlineMeshShape cubeShape('cube', cube);\n    PolygonMesh sphere = PolygonMesh();\n    sphere.addSphere(Xfo(), 1.0, 16, true, true);\n    InlineMeshShape sphereShape('sphere', sphere);\n\n    InlineShader phong = draw.registerShader(OGLSurfaceShader());\n    InlineMaterial mat = phong.getOrCreateMaterial('mat');\n\n    InlineTransform rootTfo = handle.getRootTransform();\n    InlineTransform cubeTfo = rootTfo.addChild(StaticInlineTransform('cubesXfo'));\n    InlineTransform sphereTfo = rootTfo.addChild(StaticInlineTransform('spheresXfo'));\n\n    InlineInstance cubeInstance = SimpleInlineInstance('cubeInst', cubeTfo, cubeShape);\n    InlineInstance sphereInstance = SimpleInlineInstance('sphereInst', sphereTfo, sphereShape);\n    cubeInstance.addMaterial(mat);\n    sphereInstance.addMaterial(mat);\n  }\n\n  InlineTransform rootTfo = handle.getRootTransform();\n  InlineTransform cubeTfo = rootTfo.getChild('cubesXfo');\n  InlineTransform sphereTfo = rootTfo.getChild('spheresXfo');\n  InlineInstance cubeInstance = cubeTfo.getChild('cubeInst');\n  InlineInstance sphereInstance = sphereTfo.getChild('sphereInst');\n\n  cubeTfo.setLocalCount(count);\n  sphereTfo.setLocalCount(count);\n\n  for(Size i=0;i<count;i++) {\n    cubeTfo.setLocalXfo(i, Xfo(Vec3(-1.5, i * 3, 0)));\n    sphereTfo.setLocalXfo(i, Xfo(Vec3(1.5, i * 3, 0)));\n\n    Color color1, color2;\n    color1.r = mathRandomScalar(17, i * 2) * 0.75 + 0.25;\n    color1.g = mathRandomScalar(18, i * 3) * 0.75 + 0.25;\n    color1.b = mathRandomScalar(19, i * 4) * 0.75 + 0.25;\n    color2.r = mathRandomScalar(20, i * 5) * 0.75 + 0.25;\n    color2.g = mathRandomScalar(21, i * 6) * 0.75 + 0.25;\n    color2.b = mathRandomScalar(22, i * 7) * 0.75 + 0.25;\n  \n    cubeInstance.setTransformUniform(InlineUniform('u_diffuseColor', color1), i);\n    sphereInstance.setTransformUniform(InlineUniform('u_diffuseColor', color2), i);\n  }\n}",
            "portmap": {}
          }
        }
      ]
    }
  ],
  "extensions": [],
  "ports": [
    {
      "name": "count",
      "node": "DGNode",
      "graph": "inlinedrawing_mesh",
      "type": "Integer",
      "autoInitObjects": true,
      "member": "count",
      "mode": "in",
      "options": {
        "uiMax": 100,
        "uiMin": 1
      },
      "persistence": true,
      "default": "6"
    },
    {
      "name": "handle",
      "node": "DGNode",
      "graph": "inlinedrawing_mesh",
      "type": "DrawingHandle",
      "autoInitObjects": true,
      "member": "handle",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "result",
      "node": "DGNode",
      "graph": "inlinedrawing_mesh",
      "type": "Vec3",
      "autoInitObjects": true,
      "member": "result",
      "mode": "out",
      "persistence": true,
      "default": "{\"x\":0,\"y\":0,\"z\":0}"
    }
  ]
}