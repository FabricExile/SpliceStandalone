{
  "version": "1013000",
  "info": {
    "hostAppName": "Splice Standalone",
    "hostAppVersion": "1.0"
  },
  "nodes": [
    {
      "name": "DGNode",
      "dependencies": {},
      "bindings": [
        {
          "operator": {
            "name": "lineDrawOp",
            "entry": "lineDrawOp",
            "filename": "lineDrawOp.kl",
            "kl": "require Math;\nrequire InlineDrawing;\nrequire Geometry;\n\nalias Float64 double;\nalias Integer int;\n\nfunction double fade(double t){ return t * t * t * (t * (t * 6 - 15) + 10); }\nfunction double lerp(double t, double a, double b){ return a + t * (b - a); }\nfunction double grad(int hash, double x, double y, double z) \n{\n    int     h = hash & 15;       /* CONVERT LO 4 BITS OF HASH CODE */\n    double  u = h < 8 ? x : y,   /* INTO 12 GRADIENT DIRECTIONS.   */\n        v = h < 4 ? y : h==12||h==14 ? x : z;\n    return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);\n}\n\nfunction double pnoise (double ix, double iy, double iz)\n{\n    double x = ix;\n    double y = iy;\n    double z = iz;\n\n    const Scalar p[] = [\n      151 ,160 ,137 ,91  ,90  ,15  ,131 ,13  ,201 ,95  ,96  ,53  ,194 ,233 ,7 ,225 ,140 ,36  ,103 ,30  ,69  ,142 ,8 ,99  ,37  ,240 ,21  ,10  ,23  ,190 ,6 ,148 ,247 ,120 ,234 ,75  ,0 ,26  ,197 ,62  ,94  ,252 ,219 ,203 ,117 ,35  ,11  ,32  ,57  ,177 ,33  ,88  ,237 ,149 ,56  ,87  ,174 ,20  ,125 ,136 ,171 ,168 ,68  ,175 ,74  ,165 ,71  ,134 ,139 ,48  ,27  ,166 ,77  ,146 ,158 ,231 ,83  ,111 ,229 ,122 ,60  ,211 ,133 ,230 ,220 ,105 ,92  ,41  ,55  ,46  ,245 ,40  ,244 ,102 ,143 ,54  ,65  ,25  ,63  ,161 ,1 ,216 ,80  ,73  ,209 ,76  ,132 ,187 ,208 ,89  ,18  ,169 ,200 ,196 ,135 ,130 ,116 ,188 ,159 ,86  ,164 ,100 ,109 ,198 ,173 ,186 ,3 ,64  ,52  ,217 ,226 ,250 ,124 ,123 ,5 ,202 ,38  ,147 ,118 ,126 ,255 ,82  ,85  ,212 ,207 ,206 ,59  ,227 ,47  ,16  ,58  ,17  ,182 ,189 ,28  ,42  ,223 ,183 ,170 ,213 ,119 ,248 ,152 ,2 ,44  ,154 ,163 ,70  ,221 ,153 ,101 ,155 ,167 ,43  ,172 ,9 ,129 ,22  ,39  ,253 ,19  ,98  ,108 ,110 ,79  ,113 ,224 ,232 ,178 ,185 ,112 ,104 ,218 ,246 ,97  ,228 ,251 ,34  ,242 ,193 ,238 ,210 ,144 ,12  ,191 ,179 ,162 ,241 ,81  ,51  ,145 ,235 ,249 ,14  ,239 ,107 ,49  ,192 ,214 ,31  ,181 ,199 ,106 ,157 ,184 ,84  ,204 ,176 ,115 ,121 ,50  ,45  ,127 ,4 ,150 ,254 ,138 ,236 ,205 ,93  ,222 ,114 ,67  ,29  ,24  ,72  ,243 ,141 ,128 ,195 ,78  ,66  ,215 ,61  ,156 ,180 ,151 ,160 ,137 ,91  ,90  ,15  ,131 ,13  ,201 ,95  ,96  ,53  ,194 ,233 ,7 ,225 ,140 ,36  ,103 ,30  ,69  ,142 ,8 ,99  ,37  ,240 ,21  ,10  ,23  ,190 ,6 ,148 ,247 ,120 ,234 ,75  ,0 ,26  ,197 ,62  ,94  ,252 ,219 ,203 ,117 ,35  ,11  ,32  ,57  ,177 ,33  ,88  ,237 ,149 ,56  ,87  ,174 ,20  ,125 ,136 ,171 ,168 ,68  ,175 ,74  ,165 ,71  ,134 ,139 ,48  ,27  ,166 ,77  ,146 ,158 ,231 ,83  ,111 ,229 ,122 ,60  ,211 ,133 ,230 ,220 ,105 ,92  ,41  ,55  ,46  ,245 ,40  ,244 ,102 ,143 ,54  ,65  ,25  ,63  ,161 ,1 ,216 ,80  ,73  ,209 ,76  ,132 ,187 ,208 ,89  ,18  ,169 ,200 ,196 ,135 ,130 ,116 ,188 ,159 ,86  ,164 ,100 ,109 ,198 ,173 ,186 ,3 ,64  ,52  ,217 ,226 ,250 ,124 ,123 ,5 ,202 ,38  ,147 ,118 ,126 ,255 ,82  ,85  ,212 ,207 ,206 ,59  ,227 ,47  ,16  ,58  ,17  ,182 ,189 ,28  ,42  ,223 ,183 ,170 ,213 ,119 ,248 ,152 ,2 ,44  ,154 ,163 ,70  ,221 ,153 ,101 ,155 ,167 ,43  ,172 ,9 ,129 ,22  ,39  ,253 ,19  ,98  ,108 ,110 ,79  ,113 ,224 ,232 ,178 ,185 ,112 ,104 ,218 ,246 ,97  ,228 ,251 ,34  ,242 ,193 ,238 ,210 ,144 ,12  ,191 ,179 ,162 ,241 ,81  ,51  ,145 ,235 ,249 ,14  ,239 ,107 ,49  ,192 ,214 ,31  ,181 ,199 ,106 ,157 ,184 ,84  ,204 ,176 ,115 ,121 ,50  ,45  ,127 ,4 ,150 ,254 ,138 ,236 ,205 ,93  ,222 ,114 ,67  ,29  ,24  ,72  ,243 ,141 ,128 ,195 ,78  ,66  ,215 ,61  ,156 ,180\n    ];\n\n    int   X = int(floor(x)) & 255; /* FIND UNIT CUBE THAT */\n    int   Y = int(floor(y)) & 255; /* CONTAINS POINT.     */\n    int   Z = int(floor(z)) & 255;\n    x -= floor(x);                 /* FIND RELATIVE X,Y,Z */\n    y -= floor(y);                 /* OF POINT IN CUBE.   */\n    z -= floor(z);\n    double  u = fade(x);           /* COMPUTE FADE CURVES */\n    double  v = fade(y);           /* FOR EACH OF X,Y,Z.  */\n    double  w = fade(z);\n    int  A = p[X]+Y,\n     AA = p[A]+Z, \n     AB = p[A+1]+Z, /* HASH COORDINATES OF */\n     B = p[X+1]+Y, \n     BA = p[B]+Z, \n     BB = p[B+1]+Z; /* THE 8 CUBE CORNERS, */\n  \n    return\n     lerp(w,lerp(v,lerp(u, grad(p[AA  ], x, y, z),     /* AND ADD */\n                    grad(p[BA  ], x-1, y, z)),        /* BLENDED */\n            lerp(u, grad(p[AB  ], x, y-1, z),         /* RESULTS */\n                    grad(p[BB  ], x-1, y-1, z))),     /* FROM  8 */\n            lerp(v, lerp(u, grad(p[AA+1], x, y, z-1 ),/* CORNERS */\n                    grad(p[BA+1], x-1, y, z-1)),      /* OF CUBE */\n            lerp(u, grad(p[AB+1], x, y-1, z-1),\n                    grad(p[BB+1], x-1, y-1, z-1))));\n}\n\noperator simulateLines<<<index>>>(io Vec3 positions[], io Vec3 velocities[], Scalar ratios[], Size nbPointsPerLine, Scalar time, Scalar speed, Scalar frequency) {\n  if(index % nbPointsPerLine == 0)\n    return;\n    \n  Scalar t = time + mathRandomScalar(91, index / nbPointsPerLine) * 70.0;\n  t *= 0.01 * speed;\n  Vec3 pos = positions[index] * frequency;\n  Vec3 rndVel;\n  rndVel.x = Float32(pnoise(pos.x + t, pos.y, pos.z));\n  rndVel.y = 0.2 + Float32(pnoise(pos.x + t, pos.y, pos.z + 1000.0));\n  rndVel.z = Float32(pnoise(pos.x + t, pos.y + 1000.0, pos.z));\n  \n  rndVel *= ratios[index];\n  \n  velocities[index] = velocities[index].linearInterpolate(rndVel, 0.1);\n  positions[index] += velocities[index];\n}\n\noperator limitLines<<<index>>>(io Vec3 positions[], Size nbPointsPerLine, Scalar lengths[]) {\n  Size voffset = index * nbPointsPerLine;\n  for(Size i=1;i<nbPointsPerLine;i++) {\n    Vec3 diff = positions[voffset+1] - positions[voffset];\n    diff = diff.unit() * lengths[index];\n    positions[voffset+1] = positions[voffset] + diff;\n    voffset++;\n  }\n}\n\noperator computeTangents<<<index>>>(io Vec3 normals[], Vec3 positions[], Size nbPointsPerLine) {\n  if(index % nbPointsPerLine == 0)\n    normals[index] = positions[index+1] - positions[index];\n  else\n    normals[index] = positions[index] - positions[index-1];\n  normals[index].setUnit();\n}\n\noperator lineDrawOp(io DrawingHandle handle, in Boolean forceRebuild, in Scalar frequency, io Scalar lineLengths[], io Lines lines, io Vec3 result, in Scalar speed, in Scalar time, in Color u_root, in Scalar u_shadingAmount, in Boolean u_tangents, in Color u_tip, in Scalar u_vertexColorAmount) {\n  \n  // eventually external parameters\n  Size nbLines = 1280;\n  Size nbSegments = 80;\n  InlineDrawing draw = handle.getDrawing();\n\n  // define all attributes\n  GeometryAttributes attributes = lines.getAttributes();\n  Vec3Attribute positions = attributes.getOrCreateAttribute('positions', Vec3Attribute);\n  Vec3Attribute normals = attributes.getOrCreateAttribute('normals', Vec3Attribute);\n  Vec3Attribute velocities = attributes.getOrCreateAttribute('velocities', Vec3Attribute);\n  ColorAttribute vertexColors = attributes.getOrCreateAttribute('vertexColors', ColorAttribute);\n  ScalarAttribute ratios = attributes.getOrCreateAttribute('ratios', ScalarAttribute);\n  \n  Size nbPointsPerLine = nbSegments + 1;\n  \n  if(forceRebuild || time == 0.0 || lines.indices.size() != nbLines * nbSegments * 2 || lineLengths.size() != nbLines) {\n    lines.clear();\n    lines.indices.resize(nbLines * nbSegments * 2);\n    lines.addPoints(nbLines * nbPointsPerLine);\n    lineLengths.resize(nbLines);\n    attributes = lines.getAttributes();\n    positions = attributes.getOrCreateAttribute('positions', Vec3Attribute);\n    normals = attributes.getOrCreateAttribute('normals', Vec3Attribute);\n    vertexColors = attributes.getOrCreateAttribute('vertexColors', ColorAttribute);\n    ratios = attributes.getOrCreateAttribute('ratios', ScalarAttribute);\n\n    Size offset = 0;\n    Size voffset = 0;\n    for(Size i=0;i<nbLines;i++) {\n      for(Size j=0;j<nbSegments;j++) {\n        lines.indices[offset++] = voffset++;\n        lines.indices[offset++] = voffset;\n      }\n      voffset++;\n    }\n\n    voffset = 0;\n    for(Size i=0;i<nbLines;i++) {\n      lineLengths[i] = (1.0 + mathRandomScalar(20, i * 20) * 0.1) * 0.5;\n      for(Size j=0;j<nbPointsPerLine;j++) {\n        positions.values[voffset].x = 1.0 - mathRandomScalar(17, i) * 2.0;\n        positions.values[voffset].y = lineLengths[i] * Scalar(j);\n        positions.values[voffset].z = 1.0 - mathRandomScalar(19, i * 8) * 2.0;\n        ratios.values[voffset] = Scalar(j) / Scalar(nbSegments);\n        Color a(1.0, 0.0, 0.0);\n        Color b(0.0, 0.0, 1.0);\n        vertexColors.values[voffset] = a.linearInterpolate(b, mathRandomScalar(21, i * 12));\n        voffset++;\n      }\n    }\n\n    lines.incrementVersion();\n    vertexColors.incrementVersion();\n    ratios.incrementVersion();\n  }\n     \n  if(handle.isEmpty()) {\n    InlineShader shader = draw.registerShader(OGLLinesShader());\n    InlineMaterial mat = shader.getOrCreateMaterial('mat');\n    InlineShape shape = InlineLinesShape('lines', lines);\n    InlineTransform root = handle.getRootTransform();\n    InlineTransform transform = root.addChild(StaticInlineTransform('lines', Xfo()));\n    InlineInstance instance = mat.addInstance(SimpleInlineInstance('lines', transform, shape));\n    report('drawing created...!');\n  } else {\n    simulateLines<<<lines.pointCount()>>>(positions.values, velocities.values, ratios.values, nbPointsPerLine, time, speed, frequency);\n    limitLines<<<nbLines>>>(positions.values, nbPointsPerLine, lineLengths);\n  }\n  computeTangents<<<lines.pointCount()>>>(normals.values, positions.values, nbPointsPerLine);\n\n  positions.incrementVersion();\n  normals.incrementVersion();\n  InlineShader shader = draw.getShader('OGLLinesShader');\n  InlineMaterial mat = shader.getOrCreateMaterial('mat');\n  mat.setUniform('u_normalIsTangent', u_tangents ? 1 : 0);\n  mat.setUniform('u_shadingAmount', u_shadingAmount);\n  mat.setUniform('u_vertexColorAmount', u_vertexColorAmount);\n  mat.setUniform('u_rootColor', u_root);\n  mat.setUniform('u_tipColor', u_tip);\n  \n  report('yayyyay');\n  \n}\n",
            "portmap": {}
          }
        }
      ]
    }
  ],
  "extensions": [],
  "ports": [
    {
      "name": "forceRebuild",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "Boolean",
      "autoInitObjects": true,
      "member": "forceRebuild",
      "mode": "in",
      "persistence": true,
      "default": "false"
    },
    {
      "name": "frequency",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "frequency",
      "mode": "in",
      "persistence": true,
      "default": "0.4519999921321869"
    },
    {
      "name": "handle",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "DrawingHandle",
      "autoInitObjects": true,
      "member": "handle",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "lineLengths",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "Scalar[]",
      "autoInitObjects": true,
      "member": "lineLengths",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "lines",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "Lines",
      "autoInitObjects": true,
      "member": "lines",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "result",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "Vec3",
      "autoInitObjects": true,
      "member": "result",
      "mode": "out",
      "persistence": true,
      "default": "{\"x\":0,\"y\":0,\"z\":0}"
    },
    {
      "name": "speed",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "speed",
      "mode": "in",
      "options": {
        "uiMax": 2,
        "uiMin": 0
      },
      "persistence": true,
      "default": "0.550000011920929"
    },
    {
      "name": "time",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "time",
      "mode": "in",
      "persistence": true,
      "default": "6.208333492279053"
    },
    {
      "name": "u_root",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "Color",
      "autoInitObjects": true,
      "member": "u_root",
      "mode": "in",
      "persistence": true,
      "default": "{\"r\":0,\"g\":0,\"b\":0,\"a\":1}"
    },
    {
      "name": "u_shadingAmount",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "u_shadingAmount",
      "mode": "in",
      "options": {
        "uiMax": 1,
        "uiMin": 0
      },
      "persistence": true,
      "default": "0"
    },
    {
      "name": "u_tangents",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "Boolean",
      "autoInitObjects": true,
      "member": "u_tangents",
      "mode": "in",
      "persistence": true,
      "default": "true"
    },
    {
      "name": "u_tip",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "Color",
      "autoInitObjects": true,
      "member": "u_tip",
      "mode": "in",
      "persistence": true,
      "default": "{\"r\":0.800000011920929,\"g\":0.800000011920929,\"b\":1,\"a\":1}"
    },
    {
      "name": "u_vertexColorAmount",
      "node": "DGNode",
      "graph": "inlinedrawing_lines",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "u_vertexColorAmount",
      "mode": "in",
      "persistence": true,
      "default": "0"
    }
  ]
}