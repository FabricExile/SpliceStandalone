{"version":"1012000","info":{"hostAppName":"Maya","hostAppVersion":"2014 x64"},"nodes":[{"name":"DGNode","members":[{"name":"controls","type":"Mat44[]","persistence":true,"default":"[{\"row0\":{\"x\":1,\"y\":0,\"z\":0,\"t\":-10.63856887817383},\"row1\":{\"x\":0,\"y\":1,\"z\":0,\"t\":6.98804235458374},\"row2\":{\"x\":0,\"y\":0,\"z\":1,\"t\":-1.494076251983643},\"row3\":{\"x\":0,\"y\":0,\"z\":0,\"t\":1}},{\"row0\":{\"x\":1,\"y\":0,\"z\":0,\"t\":-1.325456023216248},\"row1\":{\"x\":0,\"y\":1,\"z\":0,\"t\":12.34234046936035},\"row2\":{\"x\":0,\"y\":0,\"z\":1,\"t\":-3.00008225440979},\"row3\":{\"x\":0,\"y\":0,\"z\":0,\"t\":1}},{\"row0\":{\"x\":1,\"y\":0,\"z\":0,\"t\":8.6043701171875},\"row1\":{\"x\":0,\"y\":1,\"z\":0,\"t\":6.278371810913086},\"row2\":{\"x\":0,\"y\":0,\"z\":1,\"t\":-1.596592307090759},\"row3\":{\"x\":0,\"y\":0,\"z\":0,\"t\":1}},{\"row0\":{\"x\":1,\"y\":0,\"z\":0,\"t\":18.44607353210449},\"row1\":{\"x\":0,\"y\":1,\"z\":0,\"t\":11.72068500518799},\"row2\":{\"x\":0,\"y\":0,\"z\":1,\"t\":-2.885975122451782},\"row3\":{\"x\":0,\"y\":0,\"z\":0,\"t\":1}}]"},{"name":"result","type":"Vec3","persistence":true,"default":"{\"x\":0,\"y\":0,\"z\":0}"}],"dependencies":{},"bindings":[{"operator":{"name":"debugDrawOp","entry":"debugDrawOp","filename":"debugDrawOp.kl","kl":"require Math;\nrequire InlineDrawing;\nrequire RiggingToolbox;\n\noperator debugDrawOp(in Mat44 controls[], io Vec3 result) {\n  InlineDrawing draw = OGLInlineDrawing_GetInstance();\n\n  draw.reset();\n  \n  // create shaders\n  InlineShader flat = draw.registerShader(OGLFlatShader());\n  InlineShader flatVertexColor = draw.registerShader(OGLFlatVertexColorShader());\n\n  // create materials\n  InlineMaterial red = flat.getOrCreateMaterial('red');\n  InlineMaterial green = flat.getOrCreateMaterial('green');\n  InlineMaterial blue = flat.getOrCreateMaterial('blue');\n  red.setUniform('u_color', Color(1.0, 0.0, 0.0));\n  green.setUniform('u_color', Color(0.0, 1.0, 0.0));\n  blue.setUniform('u_color', Color(0.0, 0.0, 1.0));\n  InlineMaterial vertexColor = flatVertexColor.getOrCreateMaterial('vertexColor');\n\n  // create shapes\n  InlineDebugShape debugPoints = draw.registerShape(InlineDebugShape('points'));  \n  InlineDebugShape debugLines = draw.registerShape(InlineDebugShape('lines'));  \n  \n  // reset the shapes\n  debugPoints.reset();\n  debugLines.reset();\n  \n  // use the BezierXfo to compute a curve\n  BezierXfo curve;\n  curve.tangentLength = 3.0;\n  for(Size i=0;i<controls.size();i++)\n    curve.push(controls[i]);\n  Xfo xfos[] = curve.projectArray(64);\n\n  // fill the debug shapes\n  for(Size i=0;i<xfos.size();i++) {\n    debugPoints.drawPoint(xfos[i].tr);\n    if(i > 0)\n      debugLines.drawLine(xfos[i-1].tr, xfos[i].tr);\n  }\n  \n  // \n  debugPoints.setPointSize(5.0);\n\n  // add instances for both shapes\n  InlineTransform transfo = draw.getRoot();\n  red.addInstance(SimpleInlineInstance('points', transfo, debugPoints));\n  green.addInstance(SimpleInlineInstance('lines', transfo, debugLines));\n}\n","portmap":{}}}]}],"extensions":[],"ports":[{"name":"controls","node":"DGNode","graph":"mayaGraph","type":"Mat44[]","autoInitObjects":true,"member":"controls","mode":"in"},{"name":"result","node":"DGNode","graph":"mayaGraph","type":"Vec3","autoInitObjects":true,"member":"result","mode":"out"}]}