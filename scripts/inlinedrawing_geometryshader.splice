{"version":"1012000","info":{"hostAppName":"Maya","hostAppVersion":"2014 x64"},"nodes":[{"name":"DGNode","members":[{"name":"count","type":"Integer","persistence":true,"default":"10000"},{"name":"mesh","type":"PolygonMesh"},{"name":"points","type":"Points"},{"name":"result","type":"Vec3","persistence":true,"default":"{\"x\":0,\"y\":0,\"z\":0}"}],"dependencies":{},"bindings":[{"operator":{"name":"hairOp","entry":"hairOp","filename":"hairOp.kl","kl":"require Math;\nrequire InlineDrawing;\nrequire PolygonMesh;\nrequire Points;\n\noperator randomLocationOp<<<index>>>(Size polygonCount, PolygonMesh mesh, io Vec3 positions[], io Vec3 normals[]) {\n  GeometryLocation location;\n  location.index = Scalar(polygonCount) * mathRandomScalar(17, index);\n  location.subIndex = mathRandomScalar(18, index * 2) > 0.5 ? 1 : 0;\n  \n  location.barycentric.x = mathRandomScalar(19, index * 3);\n  location.barycentric.y = mathRandomScalar(20, index * 4) - location.barycentric.x;\n  location.barycentric.z = 1.0 - location.barycentric.x - location.barycentric.y;\n  \n  normals[index] = mesh.getNormalAtLocation(location);\n  positions[index] = mesh.getPositionAtLocation(location);\n}\n\noperator hairOp(in Integer count, io PolygonMesh mesh, io Points points, io Vec3 result) {\n  InlineDrawing draw = OGLInlineDrawing_GetInstance();\n  \n  mesh.recomputePointNormals();\n  \n  points.clear();\n  \n  GeometryAttributes attributes = points.getAttributes();\n  Vec3Attribute positions = attributes.getOrCreateAttribute('positions', Vec3Attribute);\n  Vec3Attribute normals = attributes.getOrCreateAttribute('normals', Vec3Attribute);\n  \n  points.resize(count);\n  randomLocationOp<<<count>>>(mesh.polygonCount(), mesh, positions.values, normals.values);\n  \n  draw.reset();\n  \n  InlinePointsShape shape = draw.registerShape(InlinePointsShape('points', points));\n  shape.setPointSize(2.0);\n\n  InlineShader flatShader = draw.registerShader(OGLFlatShader());\n  InlineMaterial flatMat = flatShader.getOrCreateMaterial('flat');\n  flatMat.addInstance(SimpleInlineInstance('flat', draw.getRoot(), shape));\n  \n  OGLInlineShader furShader = draw.registerShader(OGLInlineShader('fur'));\n  InlineMaterial furMat = furShader.getOrCreateMaterial('fur');\n  furMat.addInstance(SimpleInlineInstance('fur', draw.getRoot(), shape));\n\n  furShader.setVertexCode(\"\n      #version 150 //required for OSX support\n\n      uniform mat4 u_viewMatrix;\n      uniform mat4 u_modelMatrix;\n      uniform mat3 u_normalMatrix;\n      \n      in vec4 positions;\n      in vec3 normals;\n      \n      out vec3 v_normal;\n\n      void main(){\n        gl_Position = u_viewMatrix * (u_modelMatrix * positions);\n        v_normal = u_normalMatrix * normals;\n      }\n  \");\n  furShader.setGeometryCode(\"\n      #version 330\n\n      layout(points) in;\n      layout (line_strip, max_vertices=2) out;\n      \n      uniform mat4 u_projection;\n      uniform float u_length;\n      \n      in vec3 v_normal[];\n      out float v_ratio;\n\n      void main(){\n        gl_Position = u_projection * gl_in[0].gl_Position;\n        v_ratio = 0.0;\n        EmitVertex();\n        gl_Position = u_projection * (gl_in[0].gl_Position + vec4(v_normal[0], 1.0) * u_length);\n        v_ratio = 1.0;\n        EmitVertex();\n        \n        EndPrimitive();\n      }\n  \");\n  furShader.setFragmentCode(\"\n      #version 150 //required for OSX support\n      \n      uniform vec4 u_rootColor;\n      uniform vec4 u_tipColor;\n      \n      in float v_ratio;\n      \n      out vec4 out_fragColor;\n      \n      void main(){\n        out_fragColor = mix(u_rootColor, u_tipColor, v_ratio);\n      }\n  \");\n  furShader.defineUniform(InlineUniform(\"u_viewMatrix\", Mat44()));\n  furShader.defineUniform(InlineUniform(\"u_projection\", Mat44()));\n  furShader.defineUniform(InlineUniform(\"u_modelMatrix\", Mat44()));\n  furShader.defineUniform(InlineUniform(\"u_normalMatrix\", Mat33()));\n\n  furShader.defineUniform(InlineUniform(\"u_rootColor\", Color(0.05, 0.05, 0.05)));\n  furShader.defineUniform(InlineUniform(\"u_tipColor\", Color(1.0, 1.0, 1.0)));\n  furShader.defineUniform(InlineUniform(\"u_length\", 2.0));\n\n  furShader.defineAttribute('positions', \"vec3\");\n  furShader.defineAttribute('normals', \"vec3\");\n  \n}\n","portmap":{}}}]}],"extensions":[],"ports":[{"name":"count","node":"DGNode","graph":"mayaGraph","type":"Integer","autoInitObjects":true,"member":"count","mode":"in"},{"name":"mesh","node":"DGNode","graph":"mayaGraph","type":"PolygonMesh","autoInitObjects":true,"member":"mesh","mode":"in"},{"name":"points","node":"DGNode","graph":"mayaGraph","type":"Points","autoInitObjects":true,"member":"points","mode":"io"},{"name":"result","node":"DGNode","graph":"mayaGraph","type":"Vec3","autoInitObjects":true,"member":"result","mode":"out"}]}